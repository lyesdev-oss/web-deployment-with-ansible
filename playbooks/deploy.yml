---
- hosts: all
  become: true
  vars:
    container_count: 4
    default_container_name: docker
    default_container_image: ubuntu
    default_container_command: sleep 1d
    app_dir: "/home/ubuntu/lyes-cv-site"
    repo_url: "https://github.com/lyesdev-oss/autodeploy-with-ansible-cv-website-FR.git"
    docker_image: "lyes-cv-site"
    docker_container: "cv-web"

  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true
        
    - name: Ensure python3-venv is installed (Debian/Ubuntu)
      ansible.builtin.apt:
        name: python3-venv
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Create a virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv /root/venv
        creates: /root/venv/bin/activate  # Only runs if venv doesn't exist

    - name: Install Docker module inside venv
      ansible.builtin.pip:
        name: docker
        virtualenv: /root/venv

    - name: Pull default Docker image
      community.docker.docker_image:
        name: "{{ default_container_image }}"
        source: pull

    - name: Create default containers
      community.docker.docker_container:
        name: "{{ default_container_name }}{{ item }}"
        image: "{{ default_container_image }}"
        command: "{{ default_container_command }}"
        state: present
      with_sequence: count={{ container_count }}
      
    - name: Cloner/Maj dépôt CV
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        version: main
        force: yes

     - name: Construire l'image Docker CV
      community.docker.docker_image:
       path: "{{ app_dir }}"
       name: "{{ docker_image }}"
       source: build  # Critical fix
       build:
        path: "{{ app_dir }}"
        dockerfile: Dockerfile  # Optional if named "Dockerfile"
       force_source: yes
       force_tag: yes
      when: dockerfile_check.stat.exists

    - name: Arrêter et supprimer ancien container si existe
      docker_container:
        name: "{{ docker_container }}"
        state: absent

    - name: Lancer et exposer le nouveau container CV
      docker_container:
        name: "{{ docker_container }}"
        image: "{{ docker_image }}"
        state: started
        restart_policy: always
        ports:
          - "80:80"
